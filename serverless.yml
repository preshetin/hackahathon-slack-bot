service: hackathon-slack-bot
frameworkVersion: "2"
provider:
  name: aws
  runtime: nodejs12.x
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    MATCHING_CHANNEL_ID: ${env:MATCHING_CHANNEL_ID}
    MIXPANEL_PROJECT_TOKEN: ${env:MIXPANEL_PROJECT_TOKEN}
    participantsTableName: ${self:custom.participantsTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ParticipantsTable, Arn]

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  participantsTableName: ${self:custom.stage}-participants-hackathon-slack-bot

functions:
  # Functions without events are not used currenlty and were
  # created for testing locally
  participantsCreate:
    handler: participants/create.main
  participantsScan:
    handler: db/scan.main

  slack:
    handler: app.handler
    events:
      - http:
          path: slack/events
          method: post

plugins:
  - serverless-offline

resources:
  Resources:
    ParticipantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.participantsTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
